use std::fs;
use std::fs::File;
use std::io::prelude::*;
use std::path::Path;
use::std::process;
use webbrowser;

fn main() {
    println!("\n\x1b[1;94mWebbox\x1b[0m running \x1b[1;35mmain\x1b[0m function...");
    let content = "# config.wb - file generated by webbox on first launch\n[LINKS]\nhttps://github.com/ionutrogojan/webbox";
    let path = Path::new("config.wb");
    if path.exists() {
        println!("\nFile \x1b[1;93mexists.\x1b[0m\n");
        let config = fs::read_to_string("config.wb").unwrap();
        for link in config.lines() {
            if link == "[LINKS]" || link.chars().nth(0).unwrap() == '#' {
                continue;
            }
            if webbrowser::open(link).is_ok() {
                println!("\x1b[1;32mSuccess\x1b[0m opening \x1b[1;35m{}\x1b[0m", link);
            } else {
                panic!("\n\x1b[1;31mError\x1b[0m opening \x1b[1;33m{}\x1b[0m\n", link);
            }
        }
        println!("\nReady to \x1b[1;31mexit\x1b[0m.\n");
        process::exit(1);
    } else {
        let mut file = match File::create(&path) {
            Ok(file) => file,
            Err(e) => panic!("\n\x1b[1;31mError\x1b[0m creating file \x1b[1;33m{}\x1b[0m.\n", e)
        };
        match file.write_all(content.as_bytes()) {
            Ok(_) => println!("\nFile \x1b[0;93mcreated.\x1b[0m\n"),
            Err(e) => panic!("\n\x1b[1;31mError\x1b[0m writing file \x1b[1;33m{}\x1b[0m.\n", e)
        };
    }
}
